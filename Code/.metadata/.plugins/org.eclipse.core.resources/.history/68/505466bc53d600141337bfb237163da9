


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import org.jfree.ui.RefineryUtilities;
import org.moeaframework.Analyzer;
import org.moeaframework.Executor;
import org.moeaframework.core.NondominatedPopulation;
import org.moeaframework.core.Solution;
import org.moeaframework.core.variable.RealVariable;
import org.yaml.snakeyaml.Yaml;


public class TestSolver {


	public static void main(String[] args) throws IOException {

		System.out.println();
		System.out.println();
		System.out.println("---------- NSGAII ----------");
		float[][] t1 = RunTest(org.moeaframework.algorithm.NSGAII);
		System.out.println();
		System.out.println();
		System.out.println("----------  GDE3  ----------"); 
		float[][] t2 = RunTest("GDE3"); 
		
		

		plotParetoFront plotChart = new plotParetoFront("Pareto solutions", t1,t2);
		plotChart.pack();
		RefineryUtilities.centerFrameOnScreen(plotChart);
		plotChart.setVisible(true);

	}

	private static float[][] RunTest(String algorithmInUse) throws IOException, FileNotFoundException {
		Analyzer analyzer = new Analyzer()
		.withProblem("TestPinnedPinnedSandwichBeamProblem")
		.includeHypervolume()
		.showIndividualValues()
		.showStatisticalSignificance();

		Executor executor = new Executor()
		.withProblem("TestPinnedPinnedSandwichBeamProblem")
		.withMaxEvaluations(10000);
		
		ArrayList<NondominatedPopulation> runSeeds = new ArrayList<NondominatedPopulation>();
		for(int i = 0; i < 30; i++) {
			NondominatedPopulation run = executor.withAlgorithm(algorithmInUse).run();
			System.out.println("Run:" + i + " Size:" + run.size());
			runSeeds.add(run);
		}
		
		analyzer.addAll(algorithmInUse, runSeeds);

		analyzer.printAnalysis();
		
		ArrayList<Double> values = ExtractValuesFromAnalyzer(analyzer,algorithmInUse);
		
		Double maxVal = values.get(0);
		int minIndex = 0;
		for(int i = 1; i<values.size(); i++){
			if(values.get(i) > maxVal){
				maxVal = values.get(i);
				minIndex = i;
			}
		}
		
		System.out.println("Best Hypervolume value : " + maxVal);
		NondominatedPopulation result = runSeeds.get(minIndex);
				
		//display the results
		int COUNT = result.size();
		//System.out.println("Size = " + COUNT);
		float [][] data = new float[2][COUNT];
		int i=0;		
		System.out.format("d1          d2          d3          b           L           Objective1  Objective2%n");
		for (Solution solution : result) {
			System.out.format("%.4f      %.4f      %.4f      %.4f      %.4f      %.4f      %.4f%n",
					((RealVariable)solution.getVariable(0)).getValue(),
					((RealVariable)solution.getVariable(1)).getValue(),
					((RealVariable)solution.getVariable(2)).getValue(),
					((RealVariable)solution.getVariable(3)).getValue(),
					((RealVariable)solution.getVariable(4)).getValue(),
					solution.getObjective(0),
					solution.getObjective(1)
					);
			data[0][i] = (float) solution.getObjective(0);
			data[1][i] = (float) solution.getObjective(1);
			i++;
		}
		
		return data;
	}

	@SuppressWarnings("unchecked")
	private static ArrayList<Double> ExtractValuesFromAnalyzer(Analyzer analyzer, String algorithm)
			throws IOException, FileNotFoundException {
		File f = new File("test");
		analyzer.saveAnalysis(f);
		
		InputStream input = new FileInputStream(f);

		Yaml yaml = new Yaml();
		LinkedHashMap<String, String> load = (LinkedHashMap<String, String>) yaml.load(input);
		Object alg = load.get(algorithm);
		Object hyp = ((LinkedHashMap<String, String>) alg).get("Hypervolume");
		Object val = ((LinkedHashMap<String, String>) hyp).get("Values");
		ArrayList<Double> values = (ArrayList<Double>) val;
		return values;
	}

}
