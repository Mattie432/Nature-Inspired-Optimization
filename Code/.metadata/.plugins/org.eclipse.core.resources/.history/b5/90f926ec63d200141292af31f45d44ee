

import org.moeaframework.core.Solution;
import org.moeaframework.core.variable.EncodingUtils;
import org.moeaframework.core.variable.RealVariable;
import org.moeaframework.problem.AbstractProblem;


public class PinnedPinnedSandwichBeamProblem extends AbstractProblem {

	private double [][] pEc = new double[3][3]; //density p, young constant E, cost c for each material

	public PinnedPinnedSandwichBeamProblem() {
		super(5,2,1);
		
		//material 1
		pEc[0][0] = 100.0;
		pEc[0][1] = 1.60E+09;
		pEc[0][2] = 500.0;
		//material 2
		pEc[1][0] = 2770.0;
		pEc[1][1] = 7.00E+10;
		pEc[1][2] = 1500.0;
		//material 3
		pEc[2][0] = 7780.0;
		pEc[2][1] =  2.00E+11;
		pEc[2][2] = 800.0;
	}
	
	
	@Override
	public void evaluate(Solution solution) {
		double[] x = EncodingUtils.getReal(solution);
		double f1 = 0.0; // == v (frequency)
		double f2 = 0.0; // == cost

		double d_1 = x[0];
		double d_2 = x[1];
		double d_3 = x[2];
		
		double b = x[3];
		double L = x[4];
		
		double EI = ((2*b) / 3) * ( (pEc[0][1]*Math.pow(d_1,3)) + (pEc[1][1]*(Math.pow(d_2,3)-Math.pow(d_1,3))) + (pEc[2][1]*( Math.pow(d_3,3) - Math.pow(d_2,3))) );
		double u = (2*b) * ( (pEc[0][0] * d_1) + (pEc[1][0] * ( d_2 - d_1 )) + (pEc[2][0] * (d_3 - d_2)) );
		
		f1 = (Math.PI / ( 2* Math.pow(L,2) )) * (Math.pow((EI / u),0.5));
		f2 = (2*b*L) * ( (pEc[0][2] * d_1) + (pEc[1][2] * (d_2 - d_1)) + (pEc[2][2] * (d_3 - d_2)) );
		
		solution.setObjective(0, f1);
		solution.setObjective(1, f2);
		
		//need to do this for the lower bounds
		// abs values, no neg numbers
//		double constraintTotalWidth  = 0.0;
//		if( d_3 > 0.6 ){
//			constraintTotalWidth = d_3 - 0.6;
//		}else if (d_3 < 0.3){
//			constraintTotalWidth = 0.3 - d_3;
//		}
//		solution.setConstraint(0, constraintTotalWidth);

		double constraintu = 0.0;
		if( u > 2800 ){
			constraintu = u - 2800;
		}else if( u < 2000){
			constraintu = 2000 - u;
		}
		solution.setConstraint(0, constraintu);

		double material2Width = 0.0;
		if(d_2 - d_1 > 0.58){
			material2Width = d_2 - d_1;
		}else if(d_2 - d_1 < 0.01){
			material2Width = Math.abs(d_2 - d_1)
		}
		
		double material3Width = 0.0;
	}

	@Override
	public Solution newSolution() {
		Solution solution = new Solution(numberOfVariables, numberOfObjectives,numberOfConstraints);
				
		solution.setVariable(0,  new RealVariable(0.01, 0.58));     // d1
		//should be 0.29 because min size of d3==0.3, min size of d1==0.01
		//therefore min size of d2 needs to be 0.29 in order to add with min size of d1 to make min size of d3.
		solution.setVariable(1,  new RealVariable(0.02, 0.59));     // d2
		solution.setVariable(2,  new RealVariable(0.30, 0.60));     // d3
		
		solution.setVariable(3,  new RealVariable(0.30, 0.55));     // b (beam width)
		solution.setVariable(4,  new RealVariable(3.00, 6.00));     // L (beam length)
		
		return solution;
	}
	
	
	
}
