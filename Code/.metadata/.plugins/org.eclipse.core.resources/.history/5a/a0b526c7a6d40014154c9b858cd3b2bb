


import java.io.File;
import java.io.IOException;

import org.jfree.ui.RefineryUtilities;
import org.moeaframework.Analyzer;
import org.moeaframework.Executor;
import org.moeaframework.core.NondominatedPopulation;
import org.moeaframework.core.PRNG;
import org.moeaframework.core.Problem;
import org.moeaframework.core.Solution;
import org.moeaframework.core.indicator.Hypervolume;
import org.moeaframework.core.spi.ProblemFactory;
import org.moeaframework.problem.AbstractProblem;


public class Solver {



	public static void main(String[] args) throws IOException {

		//configure and run this experiment
		NondominatedPopulation result = new Executor()
		.withProblem("PinnedPinnedSandwichBeamProblem")
		//use 2 algorithsm, e.g. nsga2 & GDE3
		.withAlgorithm("NSGAII")
		.withMaxEvaluations(10000)
		.distributeOnAllCores()
		.run();

		//display the results
		int COUNT = result.size();
		float [][] data = new float[2][COUNT];
		int i=0;		
		System.out.format("d1          Objective1  Objective2%n");
		for (Solution solution : result) {
			System.out.format("%.4f      %.4f%n",
					solution.getVariable(0),
					solution.getObjective(0),
					solution.getObjective(1)
					);
			data[0][i] = (float) solution.getObjective(0);
			data[1][i] = (float) solution.getObjective(1);
			i++;
		}
		
		plotParetoFront plotChart = new plotParetoFront("Pareto solutions", data);
		plotChart.pack();
		RefineryUtilities.centerFrameOnScreen(plotChart);
		plotChart.setVisible(true); 

		Analyzer analyzer = new Analyzer()
		.withProblem("PinnedPinnedSandwichBeamProblem")
		.includeHypervolume()
		.showStatisticalSignificance();

		Executor executor = new Executor()
		.withProblem("PinnedPinnedSandwichBeamProblem")
		.withMaxEvaluations(10000);
		analyzer.addAll("NSGAII", executor.withAlgorithm("NSGAII").runSeeds(30));
		analyzer.addAll("MOEAD", executor.withAlgorithm("MOEAD").runSeeds(30));

		analyzer.printAnalysis();
		
	}

}
